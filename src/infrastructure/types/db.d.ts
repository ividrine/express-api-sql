/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type Generated<T> =
  T extends ColumnType<infer S, infer I, infer U>
    ? ColumnType<S, I | undefined, U>
    : ColumnType<T, T | undefined, T>;

export type Json = JsonValue;

export type JsonArray = JsonValue[];

export type JsonObject = {
  [x: string]: JsonValue | undefined;
};

export type JsonPrimitive = boolean | number | string | null;

export type JsonValue = JsonArray | JsonObject | JsonPrimitive;

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export interface Token {
  created_at: Generated<Timestamp>;
  expires: Timestamp;
  id: Generated<string>;
  revoked: boolean;
  token: string;
  type: string;
  updated_at: Generated<Timestamp>;
  userId: string;
}

export interface User {
  created_at: Generated<Timestamp>;
  email: string;
  id: Generated<string>;
  is_email_verified: Generated<boolean>;
  metadata: Json | null;
  password: string;
  role: Generated<string>;
  updated_at: Generated<Timestamp>;
  username: string;
}

export interface DB {
  token: Token;
  user: User;
}
